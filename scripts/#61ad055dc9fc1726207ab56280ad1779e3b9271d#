#!/usr/bin/env python3
"""
Script to autogenerate the files necessary to add a new
job to the project.
"""

import json
import logging
import os
import sys
from pathlib import Path
from string import Template
from textwrap import dedent

BASE = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

def generate_cargo(directory, job):
    file_contents = Template(dedent("""\
        cargo-features = ["profile-rustflags"]

        [package]
        name = "$job-lib"
        version = "0.1.0"
        edition = "2021"

        [lib]
        crate-type = ["staticlib"]
        path = "lib.rs"

        [dependencies]
        libc = "0.2"
        
        [dependencies.sea]
        path = "../../sea-lib"
        default-features = false
        features = ["std"]

        [features]
        default = []  # Specify other default features here, if any        
    """)).substitute(job=job)

    with open(f"{directory}/Cargo.toml", "w") as file:
        file.write(file_contents)


def generate_harness_files(directory, job, trgt):
    file_contents = Template(dedent("""\
      # This file has been generated by the add_job script
      add_library($job_harness STATIC
        ${MBEDTLS_MOD_DIR}/$target
        $job_harness.c)
      target_include_directories($job_harness
        PRIVATE ${MBEDTLS_DIR}/include/
        ${MBEDTLS_DIR}/library/
        ${PROJECT_SOURCE_DIR}/seahorn/include/)
      sea_overlink_libraries($job_harness $job_env.ir)
      sea_attach_bc($job)
      sea_add_unsat_test($job)
    """)).substitute(job=job, target=trgt)
    unit_proof_dir = os.path.join(directory, 'unit_proof')
    os.mkdir(unit_proof_dir)
    with open(f"{unit_proof_dir}/CMakeLists.txt", "w") as file:
        file.write(file_contents)
    # now add a c file
    file_path = os.path.join(unit_proof_dir, '{}_harness.c'.format(job))
    Path(file_path).touch()


def generate_env_files(directory, job):
    file_contents = Template(dedent("""\
      # This file has been generated by the add_job script
      add_library($job_env STATIC $job_env.c
      target_include_directories($job_env
        PRIVATE ${MBEDTLS_DIR}/include/
        ${MBEDTLS_DIR}/library/
        ${PROJECT_SOURCE_DIR}/seahorn/include/)
      sea_attach_bc($job_env)
    """)).substitute(job=job)
    env_dir = os.path.join(directory, 'env')
    os.mkdir(env_dir)
    with open(f"{env_dir}/CMakeLists.txt", "w") as file:
        file.write(file_contents)
    # now add a c file
    file_path = os.path.join(env_dir, '{}_env.c'.format(job))
    Path(file_path).touch()

# def generate_rust(directory):
#     file_contents = Template(dedent("""\
#         #[no_mangle]
#         pub extern \"C\" fn entrypt() {
            
#         }
#     """)).substitute()

#     with open(f"{directory}/lib.rs", "w") as file:
#         file.write(file_contents)


# def generate_c(directory, job):
#     file_contents = Template(dedent("""\
#         #include <stdio.h>

#         #include "seahorn/seahorn.h"
#         #include "inc/lib.h"

#         int main() {
#             entrypt();
#             return 42;
#         }
#     """)).substitute()

#     with open(f"{directory}/{job}.c", "w") as file:
#         file.write(file_contents)


# def add_to_json(job):
#     json_file = os.path.join(BASE, "scripts", "rust-jobs.json")

#     with open(json_file, "r") as file:
#         data = json.load(file)
#         data["jobs"].append(job)
#         data["jobs"] = sorted(data["jobs"])

#     with open(json_file, "w") as file:
#         json.dump(data, file, indent=4)


def add_subdir_to_cmake(directory, subdir):
    file_contents = Template(dedent("""\
        add_subdirectory($subdir)
    """)).substitute(subdir=subdir)
    f = os.path.join(directory, 'CMakeLists.txt')
    with open(f, "w") as file:
        file.write(file_contents)
    
# create new component e.g. library if needed and update associated cmake file
# directory is job directory
def create_component(directory):
    d = Path(directory)
    assert d.is_dir()
    p = d.parents[0] 
    if p.exists() and not p.is_dir():
      logging.error('{} exists and is not a directory!'.format(directory))
      sys.exit(1)
    elif not p.exists():
      p.mkdir()
      p.touch('CMakeLists.txt')
      # go up to seahorn
      seahorn_dir = p.parents[1]
      update_seahorn_cmake()  # new dir so update seahorn dir
    file_contents = Template(dedent("""\
        add_subdirectory($job_str)
    """)).substitute(data=data, job_str=job_str)

    with open(cmake_file, "w") as file:
        file.write(file_contents)

def update_seahorn_cmake()
    pass
def update_component_cmake():
    json_file = os.path.join(BASE, "scripts", "rust-jobs.json")

    with open(json_file, "r") as file:
        data = json.load(file)
        job_list = data["jobs"]

    job_str = ")\nadd_subdirectory(".join([f"{job}" for job in job_list])
    cmake_file = os.path.join(BASE, "src", "rust-jobs", "CMakeLists.txt")

    file_contents = Template(dedent("""\
        add_subdirectory($job_str)
    """)).substitute(data=data, job_str=job_str)

    with open(cmake_file, "w") as file:
        file.write(file_contents)


def main():
    if len(sys.argv) < 2:
        print("Error: Please specify a name for your job.")
    else:
        args = len(sys.argv)
        for i in range(1, args):
            job = sys.argv[i]
            directory = os.path.join(BASE, "src", "rust-jobs", job)
            if os.path.isdir(directory):
                print(f"Error: The job \"{job}\" already exists.")
                continue

            os.mkdir(directory)
            generate_cargo(directory, job)
            generate_cmake_lists(directory, job)
            generate_rust(directory)
            generate_c(directory, job)
            add_to_json(job)
            print(f"Created job: {job}")

        update_cmake()


if __name__ == "__main__":
    main()
